[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\abhishek.kumar32\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\abhishek.kumar32\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 18.0.2.1)
[debug]       Load.loadUnit: plugins took 75.3932ms
[debug]       Load.loadUnit: defsScala took 0.2474ms
[debug] [Loading] Scanning directory C:\Users\abhishek.kumar32\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\abhishek.kumar32\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.0237 ms
[debug]           Load.resolveProject(global-plugins) took 40.9925ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\abhishek.kumar32\.sbt\1.0\plugins, plugins: List(<none>))) took 78.7013ms
[debug] [Loading] Done in C:\Users\abhishek.kumar32\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 103.0919ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2957ms
[debug]     Load.loadUnit(file:/C:/Users/abhishek.kumar32/.sbt/1.0/plugins/, ...) took 188.7824ms
[debug]   Load.apply: load took 405.731ms
[debug]   Load.apply: resolveProjects took 7.5525ms
[debug]   Load.apply: finalTransforms took 72.7284ms
[debug]   Load.apply: config.delegates took 6.2539ms
[debug]   Load.apply: Def.make(settings)... took 618.116ms
[debug]   Load.apply: structureIndex took 107.3169ms
[debug]   Load.apply: mkStreams took 1.7704ms
[info] loading global plugins from C:\Users\abhishek.kumar32\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3008.5293ms
[debug]           Load.loadUnit: plugins took 28.26ms
[debug]           Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory D:\Abhishek\SkillUp\SparkScalaCourse\humiditySensorData\project
[debug]             Load.loadUnit: mkEval took 10.4898ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Abhishek\SkillUp\SparkScalaCourse\humiditySensorData\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.0616 ms
[info] loading settings for project humiditysensordata-build from idea1.sbt ...
[debug]               Load.resolveProject(humiditysensordata-build) took 7.3359ms
[debug]             Load.loadTransitive: finalizeProject(Project(id humiditysensordata-build, base: D:\Abhishek\SkillUp\SparkScalaCourse\humiditySensorData\project, plugins: List(<none>))) took 10.0197ms
[debug] [Loading] Done in D:\Abhishek\SkillUp\SparkScalaCourse\humiditySensorData\project, returning: (humiditysensordata-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2378.3323ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.9502ms
[debug]         Load.loadUnit(file:/D:/Abhishek/SkillUp/SparkScalaCourse/humiditySensorData/project/, ...) took 2414.7947ms
[debug]       Load.apply: load took 2416.4866ms
[debug]       Load.apply: resolveProjects took 0.1197ms
[debug]       Load.apply: finalTransforms took 12.6173ms
[debug]       Load.apply: config.delegates took 0.4074ms
[debug]       Load.apply: Def.make(settings)... took 163.967ms
[debug]       Load.apply: structureIndex took 44.8766ms
[debug]       Load.apply: mkStreams took 0.0036ms
[info] loading project definition from D:\Abhishek\SkillUp\SparkScalaCourse\humiditySensorData\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4181.1537ms
[debug]     Load.loadUnit: defsScala took 0.0071ms
[debug] [Loading] Scanning directory D:\Abhishek\SkillUp\SparkScalaCourse\humiditySensorData
[debug]       Load.loadUnit: mkEval took 0.3525ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.7164 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 44.8803ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\Abhishek\SkillUp\SparkScalaCourse\humiditySensorData, plugins: List(<none>))) took 51.2674ms
[debug] [Loading] Done in D:\Abhishek\SkillUp\SparkScalaCourse\humiditySensorData, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2988.5456ms
[debug]     Load.loadUnit: cleanEvalClasses took 131.8153ms
[debug]   Load.loadUnit(file:/D:/Abhishek/SkillUp/SparkScalaCourse/humiditySensorData/, ...) took 7302.9883ms
[debug] Load.apply: load took 7305.2591ms
[debug] Load.apply: resolveProjects took 0.1266ms
[debug] Load.apply: finalTransforms took 32.2905ms
[debug] Load.apply: config.delegates took 0.3141ms
[debug] Load.apply: Def.make(settings)... took 117.6609ms
[debug] Load.apply: structureIndex took 29.9478ms
[debug] Load.apply: mkStreams took 0.0061ms
[info] set current project to humiditySensorData (in build file:/D:/Abhishek/SkillUp/SparkScalaCourse/humiditySensorData/)
[warn] there's a key that's not used by any other settings/tasks:
[warn]  
[warn] * root / showSuccess
[warn]   +- D:\Abhishek\SkillUp\SparkScalaCourse\humiditySensorData\build.sbt:4
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59122 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59122, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to humiditySensorData (in build file:/D:/Abhishek/SkillUp/SparkScalaCourse/humiditySensorData/)
[debug] > Exec(idea-shell, None, None)
